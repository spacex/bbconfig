# Set up Django environment
import sys
sys.path.append('/path/to/django')

from django.core.management import setup_environ
import settings

setup_environ(settings)

# Maybe should just import * instead of listing them out
from bbconfig.models import Command, Host, Project, Builder, CommandSearchReplace, Property

# You will see lots of encoding conversion. The database may use UTF-8 while
# BuildBot may only work with ASCII (could be remnant of old version)

# Config Here
name = 'project-name'

proj = Project.objects.get(name=name)

# What Project am I?
ldapgroup = proj.ldap_group

# who should be noticed about buildslaves missing
slaveNotify = ['email.address@example.com']

#### STOP ####

c = BuildmasterConfig = {}
c['slaves'] = []
c['slavePortnum'] = 0
c['change_source'] = None
c['schedulers'] = []
c['builders'] = []
c['status'] = []
c['projectName'] = ''
c['projectURL'] = ''
c['buildbotURL'] = ''

# STATE DB
c['db_url'] = "DB_URL"

# TODO: Have Django interface for various properties on the main project
#  config, like the two below

# State Caches
c['buildCacheSize'] = 300
c['changeCacheSize'] = 1000

# TODO: We don't need project[] anymore
project = {}
project['id'] = proj.name
project['svnRoot'] = proj.rcs_path
project['name'] = proj.description
project['url'] = proj.url
project['slavePort'] = proj.slaveport
project['statusPort'] = proj.statusport

# Set our project details
c['projectName'] = project['name']
c['projectURL'] = project['url']
# TODO: pull this into Django
c['buildbotURL'] = 'http://buildbot.example.com/%s-bot' % project['name']
# this is the port that BuildSlaves talk to. this is unique per project
c['slavePortnum'] = project['slavePort']

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()
# Status Output
from buildbot.status.html import WebStatus
# Web Page
c['status'].append(WebStatus(http_port=project['statusPort'], allowForce=True))


# Setup environment variables
env = { 'LANG': 'C'}

# Setup the BuildSlaves
# each component of the 'slaves' list is a tuple of bot name and password
# these are shared between all the projects
from buildbot.buildslave import BuildSlave

# SVN data
from buildbot.steps.source import SVN

import re
# builders for the schedulers
from buildbot.process.factory import BuildFactory
from buildbot.steps import shell
from buildbot.process.properties import WithProperties
builderNames = []

for builder in proj.builder_set.filter(disabled=False):

	builderName = builder.builder_name.encode('ascii')

	builderNames.append(builderName)

	# Generate properties from project and builder
	properties = {}
	for property in proj.property_set.all():
		properties[property.name] = property.value
	for property in builder.property_set.all():
		properties[property.name] = property.value

	f1 = BuildFactory()

	# iterate through all the commands
	for command in proj.command_set.order_by('sequence'):
		cmd = command.command.split()

		# we have to iterate numerically so that we can edit the array
		# normal 'for foo in bar' gives copies that go out of scope after iterating
		for i in range(len(cmd)):
			for s_r in proj.commandsearchreplace_set.all():
				if cmd[i] == s_r.search:
					cmd[i] = '%s' % s_r.replace
			for s_r in builder.commandsearchreplace_set.all():
				if cmd[i] == s_r.search:
					cmd[i] = '%s' % s_r.replace
			if re.search('%(.*)s', cmd[i]):
				cmd[i] = WithProperties(cmd[i])

		arg = {}
		if command.description != '':
			arg['description'] = command.description.encode('ascii')
		if command.descriptionDone != '':
			arg['descriptionDone'] = command.descriptionDone.encode('ascii')
		if command.name != '':
			arg['name'] = command.name.encode('ascii')
		if command.work_dir != '':
			arg['workdir'] = command.work_dir.encode('ascii')

		# python = no switch, so this is the types of commands
		if command.type == 'S':
			f1.addStep(shell.ShellCommand(command=cmd, env = env,
				flunkOnFailure=command.flunkOnFail,
				warnOnFailure=command.warnOnFail,
				alwaysRun=command.alwaysRun,
				**arg))

		elif command.type == 'R':
			mode = ''

			# TODO: more types may be necessary when using RCS other than SVN
			if (command.rcs_mode == 'C'):
				mode='clobber'
			elif (command.rcs_mode == 'U'):
				mode='copy'

			if (proj.rcs_type == 'S'):
				f1.addStep(SVN(mode=mode, defaultBranch='trunk',
					baseURL=command.project.rcs_path.encode('ascii')))
			else:
				# TODO: handle more RCS types
				pass

		elif command.type == 'C':
			cmd.extend(builder.makeparams.split())
			f1.addStep(shell.Compile(command=cmd, env = env,
				**arg))

		elif command.type == 'T':
			f1.addStep(shell.Test(command=cmd, env = env,
				timeout=command.timeout,
				**arg))

		else:
			# Handle unknown command type, which should NEVER
			#    happen if django is working properly amd all
			#    cases are handled above
			pass

	for host in builder.host_set.all():
		hostname = host.hostname.encode('ascii')
		password = host.password.encode('ascii')

		c['slaves'].append(BuildSlave(hostname, password,
			max_builds=host.max_builds, notify_on_missing=slaveNotify))

		c['builders'].append({'name': builderName,
			'slavename': host.hostname,
			'builddir': 'update-' + builderName,
			'factory': f1,
			'properties'': properties,
			'keepalive_interval': 300
		})

# TODO: use Django to sort
c['builders'] = sorted(c['builders'])

# How we want the builds to be scheduled
from buildbot.scheduler import Scheduler, Nightly, Try_Userpass

# TODO: add scheduler table/object
scheduler_prefix = project['name'] + ' '

checkin = Scheduler(name=scheduler_prefix+'CheckIn', branch=None, treeStableTimer=2*60,
				builderNames=builderNames)

periodic = Nightly(name=scheduler_prefix+'Periodic', branch=None, hour=[1], minute=0,
				builderNames=builderNames)

bb_try = Try_Userpass(name=scheduler_prefix+'Try', builderNames=builderNames, port=proj.tryport,
					userpass=[("user","pass")])

#c['schedulers'].append(checkin)
#c['schedulers'].append(periodic)
#c['schedulers'].append(bb_try)

for scheduler in proj.scheduler_set.filter(disabled=False):

	# Generic options for all schedulers
	arg = {}
	if scheduler.name == '':
		arg['name'] = proj.name.encode('ascii') + ' Scheduler'
	else:
		arg['name'] = scheduler.name.encode('ascii')

	arg['builderNames'] = []
	for builder_name in proj.builder_set.filter(disabled=False).filter(builder_name__in=scheduler.builderNames.values_list('builder_name')).values_list('builder_name', flat=True):
		arg['builderNames'].append(builder_name.encode('ascii'))

	new_scheduler = None

	# Nightly scheduler
	if scheduler.type == 'N':
		if scheduler.branch == '':
			arg['branch'] = None
		else:
			arg['branch'] = scheduler.branch.encode('ascii')

		if scheduler.nightly_minute != None:
			arg['minute'] = scheduler.nightly_minute
		if scheduler.nightly_hour != None:
			arg['hour'] = scheduler.nightly_hour
		if scheduler.nightly_dayOfMonth != None:
			arg['dayOfMonth'] = scheduler.nightly_dayOfMonth
		if scheduler.nightly_month != None:
			arg['month'] = scheduler.nightly_month
		if scheduler.nightly_dayOfWeek != None:
			arg['dayOfWeek'] = scheduler.nightly_dayOfWeek

		new_scheduler = Nightly(**arg)
	else:
		# Unknown scheduler type
		pass

	c['schedulers'].append(new_scheduler)


